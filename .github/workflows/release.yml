name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      upload:
        description: 'Upload to beta.prefix.dev'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-64
            artifact-name: pixi-docker-linux-amd64
          - os: macos-latest
            platform: osx-arm64
            artifact-name: pixi-docker-macos-arm64
          - os: windows-latest
            platform: win-64
            artifact-name: pixi-docker-windows-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.0
        with:
          pixi-version: latest
          cache: true

      - name: Build package
        shell: bash
        run: |
          pixi build --output-dir ./output

      - name: List build artifacts
        shell: bash
        run: |
          echo "Build artifacts:"
          ls -la ./output/
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ./output/*.conda
          retention-days: 7

      - uses: actions/attest@v1
        id: attest
        with:
          subject-path: "./output/*.conda"
          predicate-type: "https://schemas.conda.org/attestations-publish-1.schema.json"
          predicate: "{\"targetChannel\": \"https://beta.prefix.dev/pixi-extensions\"}"

      - name: Upload to beta.prefix.dev
        run: |
          # Install rattler-build if needed for upload functionality
          pixi global install rattler-build
          
          # Upload each package
          for package in ./packages/*.conda; do
            echo "Uploading $package to beta.prefix.dev/pixi-extensions"
            rattler-build upload "$package" --channel pixi-extensions --url https://beta.prefix.dev --attestation "${{ steps.attest.outputs.attestation }}"
          done

  # create-release:
  #   name: Create GitHub Release
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: ./artifacts

  #     - name: Collect and rename packages
  #       run: |
  #         mkdir -p ./release-assets
          
  #         # Linux package
  #         if [ -d "./artifacts/pixi-docker-linux-amd64" ]; then
  #           cp ./artifacts/pixi-docker-linux-amd64/*.conda ./release-assets/pixi-docker-linux-amd64.conda
  #         fi
          
  #         # macOS ARM64 package
  #         if [ -d "./artifacts/pixi-docker-macos-arm64" ]; then
  #           cp ./artifacts/pixi-docker-macos-arm64/*.conda ./release-assets/pixi-docker-macos-arm64.conda
  #         fi
          
  #         # Windows package
  #         if [ -d "./artifacts/pixi-docker-windows-amd64" ]; then
  #           cp ./artifacts/pixi-docker-windows-amd64/*.conda ./release-assets/pixi-docker-windows-amd64.conda
  #         fi
          
  #         echo "Release assets:"
  #         ls -la ./release-assets/

  #     - name: Extract version from tag
  #       id: version
  #       run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

  #     - name: Generate release notes
  #       id: release_notes
  #       run: |
  #         cat << EOF > release_notes.md
  #         # pixi-docker ${{ steps.version.outputs.VERSION }}
          
  #         ## Installation
          
  #         ### Using Pixi (Recommended)
  #         \`\`\`bash
  #         pixi global install pixi-docker --channel https://beta.prefix.dev/pixi-extensions
  #         \`\`\`
          
  #         ### Manual Installation
  #         Download the appropriate \`.conda\` package for your platform from the assets below.
          
  #         ## Platforms
  #         - **Linux (x86_64)**: \`pixi-docker-linux-amd64.conda\`
  #         - **macOS (ARM64)**: \`pixi-docker-macos-arm64.conda\`
  #         - **Windows (x86_64)**: \`pixi-docker-windows-amd64.conda\`
          
  #         ## What's Changed
  #         See the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
  #         ## Usage
  #         \`\`\`bash
  #         # Generate Dockerfiles for all environments
  #         pixi-docker generate
          
  #         # Build Docker image
  #         pixi-docker build
          
  #         # Run Docker container
  #         pixi-docker run
  #         \`\`\`
  #         EOF

  #     - name: Create Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         name: pixi-docker ${{ steps.version.outputs.VERSION }}
  #         body_path: release_notes.md
  #         draft: false
  #         prerelease: ${{ contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'alpha') }}
  #         files: |
  #           ./release-assets/*.conda
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}